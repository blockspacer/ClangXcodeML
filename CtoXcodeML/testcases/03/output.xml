<?xml version="1.0" encoding="UTF-8"?>
<XcodeProgram source="/home/hnagamin/Documents/ClangXcodeML/testcases/03/overload_of_multiplication_and_indirection.cpp" language="C" time="2016-03-28 18:43:12">
  <typeTable>
    <pointerType type="Pointer0" ref="int"/>
    <pointerType type="Pointer1" ref="Class0"/>
    <pointerType type="Pointer2" ref="Function1"/>
    <classType type="Class0">
      <name fullName="A">A</name>
      <symbols>
        <id type="Function0" sclass="extern_def" access="public"/>
        <id type="Function1" sclass="extern_def" access="public">
          <operator fullName="A::operator*">pointerRef</operator>
        </id>
        <id type="Function2" sclass="extern_def" access="public">
          <operator fullName="A::operator*">mulExpr</operator>
        </id>
        <id type="int" access="private">
          <name fullName="A::value">value</name>
        </id>
      </symbols>
    </classType>
    <classType type="Class1" is_const="1" name="Class0"/>
    <functionType type="Function0" return_type="void">
      <params>
        <name type="int">v</name>
      </params>
    </functionType>
    <functionType type="Function1" return_type="int">
      <params/>
    </functionType>
    <functionType type="Function2" return_type="Class0">
      <params>
        <name type="Class0">other</name>
      </params>
    </functionType>
    <functionType type="Function3" return_type="Class0">
      <params>
        <name type="int"></name>
        <name type="Class0"></name>
      </params>
    </functionType>
  </typeTable>
  <globalSymbols>
    <id type="Function3" sclass="extern_def">
      <operator fullName="operator*">mulExpr</operator>
    </id>
  </globalSymbols>
  <globalDeclarations>
    <classDecl type="Class0"/>
    <functionDefinition>
      <constructor/>
      <symbols>
        <id type="int" sclass="param">
          <name>v</name>
        </id>
      </symbols>
      <params>
        <name type="int">v</name>
      </params>
      <constructorInitializerList>
        <constructorInitializer>
          <Var type="int" scope="param">v</Var>
        </constructorInitializer>
      </constructorInitializerList>
      <body>
        <compoundStatement>
          <symbols/>
          <declarations/>
        </compoundStatement>
      </body>
    </functionDefinition>
    <functionDefinition>
      <operator fullName="A::operator*">pointerRef</operator>
      <symbols/>
      <params/>
      <body>
        <compoundStatement>
          <symbols/>
          <declarations/>
          <body>
            <returnStatement>
              <memberRef type="int" member="value">
                <thisExpr/>
              </memberRef>
            </returnStatement>
          </body>
        </compoundStatement>
      </body>
    </functionDefinition>
    <functionDecl>
      <operator fullName="A::operator*">mulExpr</operator>
    </functionDecl>
    <functionDecl>
      <operator fullName="operator*">mulExpr</operator>
    </functionDecl>
    <functionDefinition>
      <operator fullName="operator*">mulExpr</operator>
      <symbols>
        <id type="int" sclass="param">
          <name>k</name>
        </id>
        <id type="Class0" sclass="param">
          <name>x</name>
        </id>
      </symbols>
      <params/>
      <name type="int">k</name>
      <name type="Class0">x</name>
      <body>
        <compoundStatement>
          <symbols/>
          <declarations/>
          <body>
            <returnStatement>
              <Stmt_CXXConstructExprClass>
                <Stmt_MaterializeTemporaryExprClass>
                  <Stmt_CXXFunctionalCastExprClass>
                    <Stmt_CXXConstructExprClass>
                      <mulExpr type="int">
                        <Var type="int" scope="param">k</Var>
                        <functionCall>
                          <operator>pointerRef</operator>
                          <Var type="Class0" scope="param">x</Var>
                        </functionCall>
                      </mulExpr>
                    </Stmt_CXXConstructExprClass>
                  </Stmt_CXXFunctionalCastExprClass>
                </Stmt_MaterializeTemporaryExprClass>
              </Stmt_CXXConstructExprClass>
            </returnStatement>
          </body>
        </compoundStatement>
      </body>
    </functionDefinition>
  </globalDeclarations>
</XcodeProgram>
